# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'

jobs:
  # ===================================
  # JOB: Pruebas Backend
  # ===================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: TestPassword123!
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore

    - name: 🏗️ Build
      run: dotnet build --no-restore --configuration Release

    - name: 🧪 Run tests
      run: dotnet test --no-build --configuration Release --logger trx --collect:"XPlat Code Coverage"

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend

  # ===================================
  # JOB: Pruebas Frontend
  # ===================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./itbis-dgii-frontend

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './itbis-dgii-frontend/package-lock.json'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Run ESLint
      run: npm run lint

    - name: 🏗️ Build
      run: npm run build
      env:
        VITE_API_URL: http://localhost:5265/api

    # - name: 🧪 Run tests
    #   run: npm run test

  # ===================================
  # JOB: Análisis de Seguridad
  # ===================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ===================================
  # JOB: Build Docker Images
  # ===================================
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./ItbisDgii.API/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/itbis-dgii-api:latest
          ${{ secrets.DOCKER_USERNAME }}/itbis-dgii-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./itbis-dgii-frontend
        file: ./itbis-dgii-frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/itbis-dgii-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/itbis-dgii-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===================================
  # JOB: Deploy to Staging
  # ===================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Aquí agregarías los comandos específicos para tu entorno de staging
        # Por ejemplo, usando Docker Compose, Kubernetes, o tu proveedor de nube preferido

    - name: 🏥 Health check
      run: |
        echo "🏥 Running health checks..."
        # Comandos para verificar que el deployment fue exitoso

  # ===================================
  # JOB: Performance Tests
  # ===================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚡ Run performance tests
      run: |
        echo "⚡ Running performance tests..."
        # Aquí puedes agregar herramientas como k6, Artillery, etc.

  # ===================================
  # JOB: Deploy to Production
  # ===================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # Comandos específicos para production

    - name: 🏥 Production health check
      run: |
        echo "🏥 Running production health checks..."

    - name: 📧 Notify deployment
      if: success()
      run: |
        echo "📧 Notifying successful deployment..."
        # Notificaciones (Slack, email, etc.)